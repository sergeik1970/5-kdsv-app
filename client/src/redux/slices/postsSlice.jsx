import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

// localhost
const apiUrl = import.meta.env.VITE_API_URL;

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState = {
  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
  posts: [],
  // –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Å—Ç, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ null
  post: null,
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞
  editPost: {
    title: "",
    description: "",
    file: null
  },
  // –ü–æ–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
  newPostTitle: "",
  newPostDescription: "",
  newPostFile: null,
  // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤)
  page: 1,
  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  loading: false,
  // –ï—Å—Ç—å –ª–∏ –µ—â—ë –ø–æ—Å—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  hasMore: true,
  // –°–∞–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
  limit: 2,
};

// –°–æ–∑–¥–∞–µ–º slice —Å –∏–º–µ–Ω–µ–º posts
const postSlice = createSlice({
  name: 'posts',
  initialState,
  reducers: {
    setLoading: (state, action) => { state.loading = action.payload },
    // –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    addPosts: (state, action) => { state.posts.push(...action.payload) },
    incrementPage: (state) => { state.page += 1 },
    setHasMore: (state, action) => { state.hasMore = action.payload },
    // –û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
    resetPosts: (state) => {
      state.posts = [];
      state.page = 1;
      state.hasMore = true;
    },
    setEditTitle: (state, action) => { state.editPost.title = action.payload },
    setEditDescription: (state, action) => { state.editPost.description = action.payload },
    setEditFile: (state, action) => { state.editPost.file = action.payload },
    setNewPostTitle: (state, action) => { state.newPostTitle = action.payload },
    setNewPostDescription: (state, action) => { state.newPostDescription = action.payload },
    setNewPostFile: (state, action) => { state.newPostFile = action.payload },
    resetNewPostForm: (state) => {
      state.newPostTitle = "";
      state.newPostDescription = "";
      state.newPostFile = null;
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(createPost.pending, (state) => {
        state.loading = true;
      })
      .addCase(createPost.fulfilled, (state, action) => {
        state.loading = false;
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        state.posts.unshift(action.payload);
      })
      .addCase(createPost.rejected, (state) => {
        state.loading = false;
      })
      .addCase(fetchPostById.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchPostById.fulfilled, (state, action) => {
        state.loading = false;
        state.post = action.payload;
      })
      .addCase(fetchPostById.rejected, (state) => {
        state.loading = false;
      })
      .addCase(deletePostById.fulfilled, (state, action) => {
        state.posts = state.posts.filter(post => post._id !== action.payload);
        if (state.post && state.post._id === action.payload) {
          state.post = null;
        }
      })
      .addCase(updatePostById.fulfilled, (state, action) => {
        // –û–±–Ω–æ–≤–∏–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ—Å—Ç
        state.post = action.payload;
        // –ò —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
        const i = state.posts.findIndex(p => p._id === action.payload._id);
        if (i !== -1) state.posts[i] = action.payload;
      });
  },
});

// –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
export const initPosts = () => async (dispatch, getState) => {
  const { posts } = getState().posts;
  if (posts.length === 0) {
    dispatch(fetchPosts());
  }
};

export const {
  setLoading, addPosts, incrementPage, setHasMore, resetPosts
} = postSlice.actions;

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
export const fetchPosts = () => async (dispatch, getState) => {
  const { page, hasMore, loading, limit } = getState().posts;
  if (!hasMore || loading) return;

  try {
    dispatch(setLoading(true));
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const res = await axios.get(`${import.meta.env.VITE_API_URL}/getposts?page=${page}`);
    const data = res.data;
    dispatch(addPosts(data));
    dispatch(incrementPage());
    if (data.length < limit) dispatch(setHasMore(false));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤:", err);
  } finally {
    dispatch(setLoading(false));
  }
};

export const createPost = createAsyncThunk(
  "posts/createPost",
  async ({ title, description, file, email, username }, { rejectWithValue }) => {
    try {
      // –ó–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏
      const response = await axios.post(`${apiUrl}/create`, {
        title,
        description,
        file,
        email,
        username
      }, {
        // –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        headers: {
          "Content-Type": "application/json",
        }
      });
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞");
    }
  }
);

// –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
export const fetchPostById = createAsyncThunk(
  "posts/fetchPostById",
  async (id, { rejectWithValue }) => {
    try {
      const response = await axios.get(`${apiUrl}/getpostbyid/${id}`);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);
// –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
export const deletePostById = createAsyncThunk(
  "posts/deletePostById",
  async (id, { rejectWithValue }) => {
    try {
      console.log("üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞, id:", id);
      console.log("URL:", `${apiUrl}/deletepostbyid/${id}`);

      const response = await axios.delete(`${apiUrl}/deletepostbyid/${id}`, {
        withCredentials: true, // –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∞—Ö
      });

      console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:", response.data);
      return id;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:", error.response?.data || error.message);
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
  }
);

// –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
export const updatePostById = createAsyncThunk(
  "posts/updatePostById",
  async ({ id, title, description, file }, { rejectWithValue }) => {
    try {
      const payload = { title, description };
      // –¢–æ–ª—å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ
      if (file) payload.file = file;

      const { data } = await axios.put(`${apiUrl}/editpostbyid/${id}`, payload, {
        withCredentials: true,
        // –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        headers: { "Content-Type": "application/json" },
      });
      return data; // –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–æ—Å—Ç
    } catch (err) {
      return rejectWithValue(err.response?.data || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏");
    }
  }
);

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫—à–µ–Ω–∞ –∏ —Ä–µ–¥—å—é—Å–µ—Ä–∞
export const {
  setEditDescription,
  setEditFile,
  setEditTitle,
  resetNewPostForm,
  setNewPostDescription,
  setNewPostFile,
  setNewPostTitle
} = postSlice.actions

export default postSlice.reducer;