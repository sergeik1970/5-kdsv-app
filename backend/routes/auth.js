import express from "express";
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';
// import { login, register } from '../controllers/authController.js';
// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
const router = express.Router();

// router.post('/login', login);
// router.post('/register', register);
// –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–æ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏
router.get('/login', (req, res) => {
  res.send("GET /login —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–æ —Å—é–¥–∞ React –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã)");
});

router.get('/register', (req, res) => {
  res.send("GET /register —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–æ —Å—é–¥–∞ React –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã)");
});

// POST /register
router.post('/register', async (req, res) => {
  // –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const { username, email, password } = req.body;
  console.log("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:", req.body);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const userExist = await User.findOne({ email });
    if (userExist) return res.status(400).json("User already exists");

    // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–¥
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = await User.create({
      username,
      email,
      password: hashedPassword,
      approved: true
    });
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ
    await newUser.save();
    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", newUser);

    return res.status(201).json({ message: "User created", user: newUser });
  } catch (err) {
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞
    console.error("Registration error:", err);
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    return res.status(500).json("Server error");
  }
});

router.post("/login", async (req, res) => {
  // –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const { email, password } = req.body;
  console.log("üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:", email);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json("User not found");

    console.log("üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user);
    console.log("üß™ –í–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:", password);
    console.log("üîê –•—ç—à –≤ –ë–î:", user.password);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const validPass = await bcrypt.compare(password, user.password);
    if (!validPass) return res.status(400).json("Invalid credentials");

    // –°–æ–∑–¥–∞—ë–º —Ç–æ–∫–µ–Ω –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
    const token = jwt.sign(
      { email: user.email, username: user.username },
      process.env.JWT_SECRET || "jwt-secret-key",
      { expiresIn: "1d" }
    );

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∏
    res.cookie("token", token, {
      httpOnly: true,
      // –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏—Å—å –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ http, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ https
      secure: true, // –ø–æ—Å–ª–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ true
      sameSite: "None" // –ø–æ—Å–ª–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ "None"
    });

    console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:", user.username);
    return res.status(200).json({ message: "Login successful", username: user.username, email: user.email, token });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", err);
    return res.status(500).json("Server error");
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
router.get("/me", (req, res) => {
  // –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–∏
  const token = req.cookies.token;
  if (!token) return res.status(401).json("Not authenticated");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
  jwt.verify(token, process.env.JWT_SECRET || "jwt-secret-key", (err, decoded) => {
    if (err) return res.status(403).json("Token is invalid");

    return res.json({ username: decoded.username, email: decoded.email });
  });
});

// –í—ã—Ö–æ–¥
router.get('/logout', (req, res) => {
  // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–∏
  res.clearCookie("token", {
    httpOnly: true,
    secure: true,
    sameSite: "None"
  });
  return res.json("Success");
});

export default router;